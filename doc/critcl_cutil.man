[comment {-*- tcl -*- doctools manpage}]
[manpage_begin critcl::cutil n 0.1]
[include include/module2.inc]
[titledesc {CriTcl C-level Utilities}]
[require Tcl 8.4]
[require critcl [opt 2.1]]
[require critcl::cutil [opt 0.1]]
[description]
[para]
[include include/welcome.inc]
[para]

This document is the reference manpage for the [package critcl::cutil]
package. This package encapsulates a number of C-level utilites for
easier writing of memory allocations, assertions, and narrative tracing
and provides convenience commands to make these utilities accessible
to critcl projects.

Its intended audience are mainly developers wishing to write Tcl
packages with embedded C code.
[para]

This package resides in the Core Package Layer of CriTcl.
[para][image arch_core][para]

The reason for this is that the main [package critcl] package makes
use of the facilities for narrative tracing when
[cmd {critcl::config trace}] is set, to instrument commands and
procedures.

[comment {===================================================================}]
[section API]

[list_begin definitions]
[comment {* * ** *** ***** ******** ************* *********************}]
[call [cmd ::critcl::cutil::alloc]]

This command provides a number C-preprocessor macros which make the
writing of memory allocations for structures and arrays of structures
easier.

[para] When run the header file [file critcl_alloc.h] is directly made
available to the [file .critcl] file containing the command, and
becomes available for use in [cmd {#include}] directives of companion
C code declared via [cmd critcl::csources].

[para] The macros definitions and their signatures are:

[example {
    type* ALLOC (type)
    type* NALLOC (type, int n)
    type* REALLOC (type* var, type, int n)
    void  FREE (type* var)
}]

[para] The details of the semantics are explained in section
[sectref Allocation].

[para] The result of the command is an empty string.

[comment {* * ** *** ***** ******** ************* *********************}]
[call [cmd ::critcl::cutil::assertions] [opt [arg enable]]]

This command provides a number C-preprocessor macros for the writing
of assertions in C code.

[para] When invoked the header file [file critcl_assert.h] is directly
made available to the [file .critcl] file containing the command, and
becomes available for use in [cmd {#include}] directives of companion
C code declared via [cmd critcl::csources].

[para] The macro definitions and their signatures are

[example {
    void ASSERT (expression, char* message);
    void ASSERT_BOUNDS (int index, int size);

    void STOPAFTER (int n);

    void STREP (Tcl_Obj* o, char* s, int len);
    void STREP_DS (Tcl_Obj* o, Tcl_DString* ds);
}]

[para] Note that these definitions are conditional on the existence of
the macro [const CRITCL_ASSERT]. 

Without a [cmd {critcl::cflags -DCRITCL_ASSERT}] all assertions in the
C code are quiescent and not compiled into the object file. In other
words, assertions can be (de)activated at will during build time, as
needed by the user.

[para] For convenience this is controlled by [arg enable]. By default
([const false]) the facility available, but not active.

Using [const true] not only makes it available, but activates it as
well.

[para] The details of the semantics are explained in section
[sectref Assertions].

[para] The result of the command is an empty string.

[comment {* * ** *** ***** ******** ************* *********************}]
[call [cmd ::critcl::cutil::tracer] [opt [arg enable]]]

This command provides a number C-preprocessor macros for tracing
C-level internals.

[para] When invoked the header file [file critcl_trace.h] is directly
made available to the [file .critcl] file containing the command, and
becomes available for use in [cmd {#include}] directives of companion
C code declared via [cmd critcl::csources]. Furthermore the [file .c]
file containing the runtime support is added to the set of C companion
files

[para] The macro definitions and their signatures are

[example {

    void TRACE_ENTER (char* function);
    void TRACE_RETURN_VOID (void);
    any  TRACE_RETURN (char* format, any x);

    void TRACE  (char* format, ...);
    void TRACE0 (char* format, ...);

    void TRACE_ARGS (char* function, int c, TclObj* v[]);
    any  TRACE_RESULT (Tcl_Interp* interp, any code);
}]

[para] Note that these definitions are conditional on the existence of
the macro [const CRITCL_TRACER]. 

Without a [cmd {critcl::cflags -DCRITCL_TRACER}] all trace
functionality in the C code is quiescent and not compiled into the
object file. In other words, tracing can be (de)activated at will
during build time, as needed by the user.

[para] For convenience this is controlled by [arg enable]. By default
([const false]) the facility available, but not active.

Using [const true] not only makes it available, but activates it as
well.

Further note that the command [cmd critcl::config] now accepts a
boolean option [const trace]. Setting it activates enter/exit tracing
in all commands based on [cmd critcl::cproc], with proper printing of
arguments and results. This implicitly activates the tracing facility
in general.

[para] The details of the semantics are explained in section
[sectref Tracing]

[para] The result of the command is an empty string.

[list_end]

[comment {===================================================================}]
[section Allocation]

[list_begin definitions]
[comment {* * ** *** ***** ******** ************* *********************}]
[call [cmd {type* ALLOC (type)}]]

This macro allocates a single element of the given [arg type] and
returns a pointer to that memory.

[call [cmd {type* NALLOC (type, int n)}]]

This macro allocates [arg n] elements of the given [arg type] and
returns a pointer to that memory.

[call [cmd {type* REALLOC (type* var, type, int n)}]]

This macro expands or shrinks the memory associated with the C
variable [arg var] of type [arg type] to hold [arg n] elements of the
type. It returns a pointer to that memory.

Remember, a reallocation may move the data to a new location in memory
to satisfy the request. Returning a pointer instead of immediately
assigning it to the [arg var] allows the user to validate the new
pointer before trying to use it.

[call [cmd {void FREE (type* var)}]]

This macro releases the memory referenced by the pointer variable
[arg var].

[list_end]

[comment {===================================================================}]
[section Assertions]

[list_begin definitions]
[comment {* * ** *** ***** ******** ************* *********************}]
[call [cmd {void ASSERT (expression, char* message}]]

This macro tests the [arg expression] and panics if it does not hold.
The specified [arg message] is used as part of the panic.
The [arg message] has to be a static string, it cannot be a variable.

[comment {* * ** *** ***** ******** ************* *********************}]
[call [cmd {void ASSERT_BOUNDS (int index, int size)}]]

This macro ensures that the [arg index] is in the
range [const 0] to [const {size-1}].

[comment {* * ** *** ***** ******** ************* *********************}]
[call [cmd {void STOPAFTER(n)}]]

This macro throws a panic after it is called [arg n] times.
Note, each separate instance of the macro has its own counter.

[comment {* * ** *** ***** ******** ************* *********************}]
[call [cmd {void STREP (Tcl_Obj* o, char* s, int len)}]]

This macro properly sets the string representation of the Tcl object
[arg o] to a copy of the string [arg s], expected to be of length
[arg len].

[comment {* * ** *** ***** ******** ************* *********************}]
[call [cmd {void STREP_DS (Tcl_Obj* o, Tcl_DString* ds)}]]

This macro properly sets the string representation of the Tcl object
[arg o] to a copy of the string held by the [type DString] [arg ds].

[list_end]

[comment {===================================================================}]
[section Tracing]

All output is printed to [const stdout].

[list_begin definitions]

[comment {* * ** *** ***** ******** ************* *********************}]
[call [cmd {void TRACE_ENTER (char* function)}]]

Use this macro at the beginning of a C function to record entry into
it. The argument is expected to be the name of the entered function.

[para] Note, the tracer's runtime maintains a stack of entered
functions and expects that function exit is signaled by either
[fun TRACE_RETURN] or [fun TRACE_RETURN_VOID].

[comment {* * ** *** ***** ******** ************* *********************}]
[call [cmd {void TRACE_RETURN_VOID (void)}]]

Use this macro instead of [example {return}] to exit a void
function. Beyond returning from the function this also signals the
same to the tracer's runtime, popping the last entered function from
its stack of active functions.

[comment {* * ** *** ***** ******** ************* *********************}]
[call [cmd {any TRACE_RETURN (char* format, any x)}]]

Use this macro instead of [example {return x}] to exit a non-void
function. Beyond returning from the function with value [arg x] this
also signals the same to the tracer's runtime, popping the last
entered function from its stack of active functions.

The [arg format] is expected to be a proper formatting string for
[fun printf] and analogues, able to stringify [arg x].

[comment {* * ** *** ***** ******** ************* *********************}]
[call [cmd {void TRACE ((char* format, ...))}]]

This macro is the trace facilities' equivalent of [fun printf],
printing arbitrary data under the control of the [arg format]. Note
how it is written with doubled parentheses.

[para] The printed text is closed with a newline, and indented per the
stack of active functions.

[comment {* * ** *** ***** ******** ************* *********************}]
[call [cmd {void TRACE0 ((char* format, ...))}]]

This is the same functionality as [fun TRACE] above, except that the
printed message is [emph not] indented.

[comment {* * ** *** ***** ******** ************* *********************}]
[call [cmd {void TRACE_ARGS (char* function, int c, TclObj* v[])}]]

This is a special macro used within the core [package critcl] package
to provide entry tracing for [cmd critcl::cproc]-based commands. It
takes the name of the command, plus count and values of the Tcl
arguments.

[comment {* * ** *** ***** ******** ************* *********************}]
[call [cmd {any TRACE_RESULT (Tcl_Interp* interp, any code)}]]

This is a special macro used within the core [package critcl] package
to provide exit tracing for [cmd critcl::cproc]-based commands. It
takes the interpreter holding the command result, and the Tcl return
code.

[list_end]

[comment {===================================================================}]
[include include/feedback2.inc]
[manpage_end]
